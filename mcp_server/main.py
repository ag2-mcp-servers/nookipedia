# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:36:58+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union
from uuid import UUID

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Header

from models import (
    Category4,
    Category6,
    Color6,
    Color7,
    Color8,
    Color9,
    Error400,
    Error401,
    Error404,
    Error500,
    Game,
    Labeltheme,
    NhArtGetResponse,
    NHArtwork,
    NHBug,
    NhBugsGetResponse,
    NHClothing,
    NhClothingGetResponse,
    NhEventsGetResponse,
    NHFish,
    NhFishGetResponse,
    NHFossilGroup,
    NHFossilGroupWithIndividualFossils,
    NhFossilsAllGetResponse,
    NhFossilsGroupsGetResponse,
    NhFossilsIndividualsGetResponse,
    NHFurniture,
    NhFurnitureGetResponse,
    NHIndividualFossil,
    NHInterior,
    NhInteriorGetResponse,
    NHItem,
    NhItemsGetResponse,
    NHPhoto,
    NhPhotosGetResponse,
    NHRecipe,
    NhRecipesGetResponse,
    NHSeaCreature,
    NhSeaGetResponse,
    NHTool,
    NhToolsGetResponse,
    Personality1,
    Species1,
    Style1,
    VillagersGetResponse,
)

app = MCPProxy(
    description="The Nookipedia API provides endpoints for retrieving *Animal Crossing* data pulled from the [Nookipedia wiki](https://nookipedia.com/wiki/Main_Page). A couple of the key benefits of using the Nookipedia API is access to data spanning the entire *Animal Crossing* series, as well as information that is constantly updated and expanding as editors work on the wiki.<br><br>Access to the Nookipedia API requires obtaining a key. This is so we can manage our scale and provide better support for our users. To request access to the API, please fill out [this form](https://forms.gle/wLwtXLerKhfDrRLY8).<br><br>This API is 'version 2' of our [original API](https://nookipedia.com/api/). While the previous API scraped information directly from the wiki, this new edition of the API pulls data from a structured and constrained database, resulting in higher-quality data, better searching, and support for filtering.",
    title='Nookipedia',
    version='1.5.0',
    servers=[{'url': 'https://api.nookipedia.com/'}],
)


@app.get(
    '/nh/art',
    description=""" Get a list of all artwork and their details in *Animal Crossing: New Horizons*. """,
    tags=['nh_artwork_management'],
)
def get_nh_art(
    x__a_p_i__k_e_y: UUID = Header(..., alias='X-API-KEY'),
    accept__version: str = Header(..., alias='Accept-Version'),
    hasfake: Optional[str] = None,
    excludedetails: Optional[str] = None,
    thumbsize: Optional[int] = None,
):
    """
    All New Horizons artwork
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/nh/art/{artwork}',
    description=""" Retrieve information about a specific artwork in *Animal Crossing: New Horizons*. """,
    tags=['nh_artwork_management'],
)
def get_nh_art__artwork(
    artwork: str,
    x__a_p_i__k_e_y: UUID = Header(..., alias='X-API-KEY'),
    accept__version: str = Header(..., alias='Accept-Version'),
    thumbsize: Optional[int] = None,
):
    """
    Single New Horizons artwork
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/nh/bugs',
    description=""" Get a list of all bugs and their details in *Animal Crossing: New Horizons*. """,
    tags=['nh_bug_data_management'],
)
def get_nh_bugs(
    x__a_p_i__k_e_y: UUID = Header(..., alias='X-API-KEY'),
    accept__version: str = Header(..., alias='Accept-Version'),
    month: Optional[str] = None,
    excludedetails: Optional[str] = None,
    thumbsize: Optional[int] = None,
):
    """
    All New Horizons bugs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/nh/bugs/{bug}',
    description=""" Retrieve information about a specific bug in *Animal Crossing: New Horizons*. """,
    tags=['nh_bug_data_management'],
)
def get_nh_bugs__bug(
    bug: str,
    x__a_p_i__k_e_y: UUID = Header(..., alias='X-API-KEY'),
    accept__version: str = Header(..., alias='Accept-Version'),
    thumbsize: Optional[int] = None,
):
    """
    Single New Horizons bug
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/nh/clothing',
    description=""" Get a list of all clothing items and their details in *Animal Crossing: New Horizons*. """,
    tags=['nh_clothing_inventory_management'],
)
def get_nh_clothing(
    x__a_p_i__k_e_y: UUID = Header(..., alias='X-API-KEY'),
    accept__version: str = Header(..., alias='Accept-Version'),
    category: Optional[Category4] = None,
    color: Optional[Color6] = None,
    style: Optional[Style1] = None,
    labeltheme: Optional[Labeltheme] = None,
    excludedetails: Optional[str] = None,
):
    """
    All New Horizons clothing
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/nh/clothing/{clothing}',
    description=""" Retrieve information about a specific clothing item in *Animal Crossing: New Horizons*. """,
    tags=['nh_clothing_inventory_management'],
)
def get_nh_clothing__clothing(
    clothing: str,
    x__a_p_i__k_e_y: UUID = Header(..., alias='X-API-KEY'),
    accept__version: str = Header(..., alias='Accept-Version'),
    thumbsize: Optional[int] = None,
):
    """
    Single New Horizons clothing
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/nh/events',
    description=""" Get a list of events and dates in *Animal Crossing: New Horizons*, filterable to specific years, months, or days. Data is available for the current and next year. """,
    tags=['nh_event_data_management'],
)
def get_nh_events(
    x__a_p_i__k_e_y: UUID = Header(..., alias='X-API-KEY'),
    accept__version: str = Header(..., alias='Accept-Version'),
    date: Optional[str] = None,
    year: Optional[str] = None,
    month: Optional[str] = None,
    day: Optional[int] = None,
):
    """
    All New Horizons events
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/nh/fish',
    description=""" Get a list of all fish and their details in *New Horizons*. """,
    tags=['nh_fish_data_management'],
)
def get_nh_fish(
    x__a_p_i__k_e_y: UUID = Header(..., alias='X-API-KEY'),
    accept__version: str = Header(..., alias='Accept-Version'),
    month: Optional[str] = None,
    excludedetails: Optional[str] = None,
    thumbsize: Optional[int] = None,
):
    """
    All New Horizons fish
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/nh/fish/{fish}',
    description=""" Retrieve information about a specific fish in *Animal Crossing: New Horizons*. """,
    tags=['nh_fish_data_management'],
)
def get_nh_fish__fish(
    fish: str,
    x__a_p_i__k_e_y: UUID = Header(..., alias='X-API-KEY'),
    accept__version: str = Header(..., alias='Accept-Version'),
    thumbsize: Optional[int] = None,
):
    """
    Single New Horizons fish
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/nh/fossils/all',
    description=""" Get a list of all the fossil groups with their respective individual fossils in *Animal Crossing: New Horizons*. """,
    tags=['nh_fossil_data_management'],
)
def get_nh_fossils_all(
    x__a_p_i__k_e_y: UUID = Header(..., alias='X-API-KEY'),
    accept__version: str = Header(..., alias='Accept-Version'),
    thumbsize: Optional[int] = None,
):
    """
    All New Horizons fossil groups or individual fossil
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/nh/fossils/all/{fossil}',
    description=""" Retrieve information about a specific fossil group with their respective individual fossils in *Animal Crossing: New Horizons*. """,
    tags=['nh_fossil_data_management'],
)
def get_nh_fossils_all__fossil(
    fossil: str,
    x__a_p_i__k_e_y: UUID = Header(..., alias='X-API-KEY'),
    accept__version: str = Header(..., alias='Accept-Version'),
    thumbsize: Optional[int] = None,
):
    """
    Single New Horizons fossil group with individual fossils
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/nh/fossils/groups',
    description=""" Get a list of all the fossil groups in *Animal Crossing: New Horizons*. """,
    tags=['nh_fossil_data_management'],
)
def get_nh_fossils_groups(
    x__a_p_i__k_e_y: UUID = Header(..., alias='X-API-KEY'),
    accept__version: str = Header(..., alias='Accept-Version'),
    thumbsize: Optional[int] = None,
):
    """
    All New Horizons fossil groups
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/nh/fossils/groups/{fossil_group}',
    description=""" Retrieve information about a specific fossil group in *Animal Crossing: New Horizons*. """,
    tags=['nh_fossil_data_management'],
)
def get_nh_fossils_groups__fossil_group(
    fossil_group: str,
    x__a_p_i__k_e_y: UUID = Header(..., alias='X-API-KEY'),
    accept__version: str = Header(..., alias='Accept-Version'),
    thumbsize: Optional[int] = None,
):
    """
    Single New Horizons fossil group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/nh/fossils/individuals',
    description=""" Get a list of all the individual fossils in *Animal Crossing: New Horizons*. """,
    tags=['nh_fossil_data_management'],
)
def get_nh_fossils_individuals(
    x__a_p_i__k_e_y: UUID = Header(..., alias='X-API-KEY'),
    accept__version: str = Header(..., alias='Accept-Version'),
    thumbsize: Optional[int] = None,
):
    """
    All New Horizons fossils
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/nh/fossils/individuals/{fossil}',
    description=""" Retrieve information about a specific individual fossil in *Animal Crossing: New Horizons*. """,
    tags=['nh_fossil_data_management'],
)
def get_nh_fossils_individuals__fossil(
    fossil: str,
    x__a_p_i__k_e_y: UUID = Header(..., alias='X-API-KEY'),
    accept__version: str = Header(..., alias='Accept-Version'),
    thumbsize: Optional[int] = None,
):
    """
    Single New Horizons fossil
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/nh/furniture',
    description=""" Get a list of all furniture and their details in *Animal Crossing: New Horizons*. """,
    tags=['nh_furniture_data_management'],
)
def get_nh_furniture(
    x__a_p_i__k_e_y: UUID = Header(..., alias='X-API-KEY'),
    accept__version: str = Header(..., alias='Accept-Version'),
    category: Optional[Category6] = None,
    color: Optional[Color7] = None,
    excludedetails: Optional[str] = None,
):
    """
    All New Horizons furniture
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/nh/furniture/{furniture}',
    description=""" Retrieve information about a specific furniture in *Animal Crossing: New Horizons*. """,
    tags=['nh_furniture_data_management'],
)
def get_nh_furniture__furniture(
    furniture: str,
    x__a_p_i__k_e_y: UUID = Header(..., alias='X-API-KEY'),
    accept__version: str = Header(..., alias='Accept-Version'),
    thumbsize: Optional[int] = None,
):
    """
    Single New Horizons furniture
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/nh/interior',
    description=""" Get a list of all interior items (flooring, wallpaper, and rugs) and their details in *Animal Crossing: New Horizons*. """,
    tags=['nh_interior_item_data_management', 'nh_item_data_management'],
)
def get_nh_interior(
    x__a_p_i__k_e_y: UUID = Header(..., alias='X-API-KEY'),
    accept__version: str = Header(..., alias='Accept-Version'),
    color: Optional[Color8] = None,
    excludedetails: Optional[str] = None,
):
    """
    All New Horizons interior items
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/nh/interior/{item}',
    description=""" Retrieve information about a specific interior item in *Animal Crossing: New Horizons*. """,
    tags=['nh_interior_item_data_management', 'nh_item_data_management'],
)
def get_nh_interior__item(
    item: str,
    x__a_p_i__k_e_y: UUID = Header(..., alias='X-API-KEY'),
    accept__version: str = Header(..., alias='Accept-Version'),
    color: Optional[Color9] = None,
    thumbsize: Optional[int] = None,
):
    """
    Single New Horizons interior item
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/nh/items',
    description=""" Get a list of all miscellaneous items (such as materials, star fragments, fruits, fences, and plants) and their details in *Animal Crossing: New Horizons*. """,
    tags=['nh_item_data_management'],
)
def get_nh_items(
    x__a_p_i__k_e_y: UUID = Header(..., alias='X-API-KEY'),
    accept__version: str = Header(..., alias='Accept-Version'),
    excludedetails: Optional[str] = None,
):
    """
    Miscellaneous New Horizons items
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/nh/items/{item}',
    description=""" Retrieve information about a miscellaneous item (such as materials, star fragments, fruits, fences, and plants) in *Animal Crossing: New Horizons*. """,
    tags=['nh_item_data_management'],
)
def get_nh_items__item(
    item: str,
    x__a_p_i__k_e_y: UUID = Header(..., alias='X-API-KEY'),
    accept__version: str = Header(..., alias='Accept-Version'),
    thumbsize: Optional[int] = None,
):
    """
    Single New Horizons miscellaneous item
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/nh/photos',
    description=""" Get a list of all character photos+posters and their details in *Animal Crossing: New Horizons*. """,
    tags=['nh_photo_data_management'],
)
def get_nh_photos(
    x__a_p_i__k_e_y: UUID = Header(..., alias='X-API-KEY'),
    accept__version: str = Header(..., alias='Accept-Version'),
    excludedetails: Optional[str] = None,
):
    """
    All New Horizons photos and posters
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/nh/photos/{item}',
    description=""" Retrieve information about a character photo or poster in *Animal Crossing: New Horizons*. """,
    tags=['nh_photo_data_management'],
)
def get_nh_photos__item(
    item: str,
    x__a_p_i__k_e_y: UUID = Header(..., alias='X-API-KEY'),
    accept__version: str = Header(..., alias='Accept-Version'),
    thumbsize: Optional[int] = None,
):
    """
    Single New Horizons photo or poster
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/nh/recipes',
    description=""" Get a list of all recipes and their details in *Animal Crossing: New Horizons*. """,
    tags=['nh_recipe_data_management'],
)
def get_nh_recipes(
    x__a_p_i__k_e_y: UUID = Header(..., alias='X-API-KEY'),
    accept__version: str = Header(..., alias='Accept-Version'),
    material: Optional[str] = None,
    excludedetails: Optional[str] = None,
    thumbsize: Optional[int] = None,
):
    """
    All New Horizons recipes
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/nh/recipes/{item}',
    description=""" Retrieve information about a specific recipe in *Animal Crossing: New Horizons*. """,
    tags=['nh_recipe_data_management'],
)
def get_nh_recipes__item(
    item: str,
    x__a_p_i__k_e_y: UUID = Header(..., alias='X-API-KEY'),
    accept__version: str = Header(..., alias='Accept-Version'),
    thumbsize: Optional[int] = None,
):
    """
    Single New Horizons recipe
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/nh/sea',
    description=""" Get a list of all sea creatures and their details in *Animal Crossing: New Horizons*. """,
    tags=['nh_sea_creature_data_management'],
)
def get_nh_sea(
    x__a_p_i__k_e_y: UUID = Header(..., alias='X-API-KEY'),
    accept__version: str = Header(..., alias='Accept-Version'),
    month: Optional[str] = None,
    excludedetails: Optional[str] = None,
    thumbsize: Optional[int] = None,
):
    """
    All New Horizons sea creatures
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/nh/sea/{sea_creature}',
    description=""" Retrieve information about a specific sea creature in *Animal Crossing: New Horizons*. """,
    tags=['nh_sea_creature_data_management'],
)
def get_nh_sea__sea_creature(
    sea_creature: str,
    x__a_p_i__k_e_y: UUID = Header(..., alias='X-API-KEY'),
    accept__version: str = Header(..., alias='Accept-Version'),
    thumbsize: Optional[int] = None,
):
    """
    Single New Horizons sea creature
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/nh/tools',
    description=""" Get a list of all tools and their details in *Animal Crossing: New Horizons*. """,
    tags=['nh_tool_data_management'],
)
def get_nh_tools(
    x__a_p_i__k_e_y: UUID = Header(..., alias='X-API-KEY'),
    accept__version: str = Header(..., alias='Accept-Version'),
    excludedetails: Optional[str] = None,
):
    """
    All New Horizons tools
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/nh/tools/{tool}',
    description=""" Retrieve information about a specific tool in *Animal Crossing: New Horizons*. """,
    tags=['nh_tool_data_management'],
)
def get_nh_tools__tool(
    tool: str,
    x__a_p_i__k_e_y: UUID = Header(..., alias='X-API-KEY'),
    accept__version: str = Header(..., alias='Accept-Version'),
    thumbsize: Optional[int] = None,
):
    """
    Single New Horizons tool
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/villagers',
    description=""" This endpoint retrieves villager information from the entire *Animal Crossing* series, with the option to filter by species, personality, game, and/or birthday. Filters use the AND operator (e.g. asking for villagers who have species `frog` and personality `smug` will return all smug frogs). Note that villagers only include the animals that act as residents. Special characters, such as Tom Nook and Isabelle, are not accessed through this endpoint. """,
    tags=['nh_villager_data_management'],
)
def get_villagers(
    x__a_p_i__k_e_y: UUID = Header(..., alias='X-API-KEY'),
    accept__version: str = Header(..., alias='Accept-Version'),
    name: Optional[str] = None,
    species: Optional[Species1] = None,
    personality: Optional[Personality1] = None,
    game: Optional[Game] = None,
    birthmonth: Optional[str] = None,
    birthday: Optional[str] = None,
    nhdetails: Optional[str] = None,
    excludedetails: Optional[str] = None,
    thumbsize: Optional[int] = None,
):
    """
    Villagers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
