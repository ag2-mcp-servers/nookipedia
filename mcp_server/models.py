# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:36:58+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field, RootModel, confloat


class Error400(BaseModel):
    details: Optional[str] = Field(
        None,
        description='A more in-depth description of the issue, including parameters and/or error text when available.',
        examples=['Provided month filter jonuary was not recognized as a valid month.'],
    )
    title: Optional[str] = Field(
        None,
        description='A brief title describing the error.',
        examples=['Failed to identify the provided month filter.'],
    )


class Error401(BaseModel):
    details: Optional[str] = Field(
        None,
        description='A more in-depth description of the issue, including parameters and/or error text when available.',
        examples=['UUID is either missing or invalid; or, unspecified server occured.'],
    )
    title: Optional[str] = Field(
        None,
        description='A brief title describing the error.',
        examples=['Failed to validate UUID.'],
    )


class Error404(BaseModel):
    details: Optional[str] = Field(
        None,
        description='A more in-depth description of the issue, including parameters and/or error text when available.',
        examples=[
            'MediaWiki Cargo request succeeded by nothing was returned for the parameters: {}'
        ],
    )
    title: Optional[str] = Field(
        None,
        description='A brief title describing the error.',
        examples=['No data was found for the given query.'],
    )


class Error500(BaseModel):
    details: Optional[str] = Field(
        None,
        description='A more in-depth description of the issue, including parameters and/or error text when available.',
        examples=['Details unknown.'],
    )
    title: Optional[str] = Field(
        None,
        description='A brief title describing the error.',
        examples=['API experienced a fatal error.'],
    )


class NHArtwork(BaseModel):
    art_name: Optional[str] = Field(
        None,
        description='The name of the real-life analog to the artwork.',
        examples=['Vitruvian Man'],
    )
    art_style: Optional[str] = Field(
        None,
        description='The art style of the artwork.',
        examples=['Pen and ink on paper'],
    )
    authenticity: Optional[str] = Field(
        None,
        description='The description of the difference between real and fake, if there is one',
        examples=[
            'If there is a coffee stain in the top right corner, it is fake. If there is no stain, it is genuine. The forgery has a key taped to the back of the canvas.'
        ],
    )
    author: Optional[str] = Field(
        None,
        description='The author of the real-life analog to the artwork.',
        examples=['Leonardo da Vinci'],
    )
    availability: Optional[str] = Field(
        None,
        description='The availability of the artwork.',
        examples=["Jolly Redd's Treasure Trawler"],
    )
    buy: Optional[int] = Field(
        None,
        description='The number of Bells the artwork may be purchased for.',
        examples=[4980],
    )
    description: Optional[str] = Field(
        None,
        description='The description of the artwork.',
        examples=[
            'This drawing is based on the &quot;ideal&quot; human-body ratio, as stated in &quot;De architectura.&quot; &quot;De architectura&quot; was a treatise by Vitruvius, an architect from the early 1st century BCE.'
        ],
    )
    fake_image_url: Optional[str] = Field(
        None,
        description='Image of the fake artwork, if it exists.',
        examples=[
            'https://dodo.ac/np/images/1/13/Academic_Painting_%28Forgery%29_NH_Icon.png'
        ],
    )
    has_fake: Optional[bool] = Field(
        None, description='Whether the artwork has a fake or not.', examples=[True]
    )
    image_url: Optional[str] = Field(
        None,
        description="Image of the real artwork. dodo.ac is Nookipedia's CDN server.",
        examples=['https://dodo.ac/np/images/e/e8/Academic_Painting_NH_Icon.png'],
    )
    length: Optional[float] = Field(
        None, description='The length of the artwork.', examples=[1]
    )
    name: Optional[str] = Field(
        None, description='Name of the artwork.', examples=['Academic Painting']
    )
    sell: Optional[int] = Field(
        None,
        description="The number of Bells the artwork can be sold to Nook's store for, when it is genuine.",
        examples=[1245],
    )
    url: Optional[str] = Field(
        None,
        description='Link to the respective Nookipedia article.',
        examples=['https://nookipedia.com/wiki/Academic_Painting'],
    )
    width: Optional[float] = Field(
        None, description='The width of the artwork.', examples=[1]
    )
    year: Optional[str] = Field(
        None,
        description='The year that the real-life analog was made.',
        examples=['circa 1487'],
    )


class AvailabilityArrayItem(BaseModel):
    months: Optional[str] = None
    time: Optional[str] = None


class TimesByMonth(BaseModel):
    field_1: Optional[str] = Field(None, alias='1')
    field_10: Optional[str] = Field(None, alias='10')
    field_11: Optional[str] = Field(None, alias='11')
    field_12: Optional[str] = Field(None, alias='12')
    field_2: Optional[str] = Field(None, alias='2')
    field_3: Optional[str] = Field(None, alias='3')
    field_4: Optional[str] = Field(None, alias='4')
    field_5: Optional[str] = Field(None, alias='5')
    field_6: Optional[str] = Field(None, alias='6')
    field_7: Optional[str] = Field(None, alias='7')
    field_8: Optional[str] = Field(None, alias='8')
    field_9: Optional[str] = Field(None, alias='9')


class North(BaseModel):
    availability_array: Optional[List[AvailabilityArrayItem]] = Field(
        None,
        description='An array of objects, each object holding a months string and the time the critter is availabile during the specified month(s) in the northern hemisphere. Most critters will have just one object. A small number of critters have variable time availability in which case this array will have multiple objects.',
        examples=[[{'months': 'Jul – Sep', 'time': '8 AM – 5 PM'}]],
    )
    months: Optional[str] = Field(
        None,
        description='The months the bug is available for in the Northern hemisphere. If all year, value will be `"All year"`.',
        examples=['Jul – Sep'],
    )
    months_array: Optional[List[int]] = Field(
        None,
        description='An array of integers representing the months the bug is available in the Northern hemisphere.',
        examples=[[7, 8, 9]],
    )
    times_by_month: Optional[TimesByMonth] = Field(
        None,
        description='An object with twelve numerical keys, each representing a month (`"1"` for January, `"2"` for February, etc.). The value is the times the critter is available during that month. If the critter is unavailable in a month, the value will be `"NA"`.',
        examples=[
            {
                '1': 'NA',
                '10': 'NA',
                '11': 'NA',
                '12': 'NA',
                '2': 'NA',
                '3': 'NA',
                '4': 'NA',
                '5': 'NA',
                '6': 'NA',
                '7': '8 AM – 5 PM',
                '8': '8 AM – 5 PM',
                '9': '8 AM – 5 PM',
            }
        ],
    )


class South(BaseModel):
    availability_array: Optional[List[AvailabilityArrayItem]] = Field(
        None,
        description='An array of objects, each object holding a months string and the time the critter is availabile during the specified month(s) in the southern hemisphere. Most critters will have just one object. A small number of critters have variable time availability in which case this array will have multiple objects.',
        examples=[[{'months': 'Jan – Mar', 'time': '8 AM – 5 PM'}]],
    )
    months: Optional[str] = Field(
        None,
        description='The months the bug is available for in the Southern hemisphere. If all year, value will be `"All year"`.',
        examples=['Jan – Mar'],
    )
    months_array: Optional[List[int]] = Field(
        None,
        description='An array of integers representing the months the bug is available in the Southern hemisphere.',
        examples=[[1, 2, 3]],
    )
    times_by_month: Optional[TimesByMonth] = Field(
        None,
        description='An object with twelve numerical keys, each representing a month (`"1"` for January, `"2"` for February, etc.). The value is the times the critter is available during that month. If the critter is unavailable in a month, the value will be `"NA"`.',
        examples=[
            {
                '1': '8 AM – 5 PM',
                '10': 'NA',
                '11': 'NA',
                '12': 'NA',
                '2': '8 AM – 5 PM',
                '3': '8 AM – 5 PM',
                '4': 'NA',
                '5': 'NA',
                '6': 'NA',
                '7': 'NA',
                '8': 'NA',
                '9': 'NA',
            }
        ],
    )


class NHBug(BaseModel):
    catchphrases: Optional[List[str]] = Field(
        None,
        description='An array of possible catchphrases the player says after catching the bug. Most critters have just one, but some can have multiple.',
        examples=[["I caught a grasshopper! They're a grass act!"]],
    )
    image_url: Optional[str] = Field(
        None,
        description="Image of the bug. dodo.ac is Nookipedia's CDN server.",
        examples=['https://dodo.ac/np/images/3/37/Grasshopper_NH_Icon.png'],
    )
    location: Optional[str] = Field(
        None,
        description='Short descriptor of where the bug can be found.',
        examples=['On the ground'],
    )
    name: Optional[str] = Field(
        None, description='Name of the bug.', examples=['Grasshopper']
    )
    north: Optional[North] = Field(
        None, description='When you can catch the bug in the Northern hemisphere.'
    )
    number: Optional[int] = Field(
        None,
        description='In-game bug number, marking position in the Critterpedia.',
        examples=[19],
    )
    rarity: Optional[str] = Field(
        None,
        description='How rare the bug is. Note that this field is currently empty for most bugs as we do not yet know how exactly bug rarities are calculated in the game code.',
        examples=['Uncommon'],
    )
    render_url: Optional[str] = Field(
        None,
        description="Render of the bug. dodo.ac is Nookipedia's CDN server.",
        examples=['https://dodo.ac/np/images/1/1d/Grasshopper_NH.png'],
    )
    sell_flick: Optional[int] = Field(
        None,
        description='The number of Bells the bug can be sold to Flick for. This value is always 1.5x that of `sell_nook`.',
        examples=[240],
    )
    sell_nook: Optional[int] = Field(
        None,
        description="The number of Bells the bug can be sold to Nook's store for.",
        examples=[160],
    )
    south: Optional[South] = Field(
        None, description='When you can catch the bug in the Southern hemisphere.'
    )
    tank_length: Optional[float] = Field(
        None,
        description='The length of the tank when the bug is placed as a furniture item.',
        examples=[1],
    )
    tank_width: Optional[float] = Field(
        None,
        description='The width of the tank when the bug is placed as a furniture item.',
        examples=[1],
    )
    total_catch: Optional[int] = Field(
        None,
        description='The total number of bug the player has to have caught before this bug will start spawning.',
        examples=[0],
    )
    url: Optional[str] = Field(
        None,
        description='Link to the respective Nookipedia article.',
        examples=['https://nookipedia.com/wiki/Grasshopper'],
    )


class AvailabilityItem(BaseModel):
    from_: Optional[str] = Field(None, alias='from')
    note: Optional[str] = None


class BuyItem(BaseModel):
    currency: Optional[str] = None
    price: Optional[int] = None


class Category(Enum):
    Tops = 'Tops'
    Bottoms = 'Bottoms'
    Dress_up = 'Dress-up'
    Headwear = 'Headwear'
    Accessories = 'Accessories'
    Socks = 'Socks'
    Shoes = 'Shoes'
    Bags = 'Bags'
    Umbrellas = 'Umbrellas'


class LabelTheme(Enum):
    Comfy = 'Comfy'
    Everyday = 'Everyday'
    Fairy_tale = 'Fairy tale'
    Formal = 'Formal'
    Goth = 'Goth'
    Outdoorsy = 'Outdoorsy'
    Party = 'Party'
    Sporty = 'Sporty'
    Theatrical = 'Theatrical'
    Vacation = 'Vacation'
    Work = 'Work'


class Style(Enum):
    Active = 'Active'
    Cool = 'Cool'
    Cute = 'Cute'
    Elegant = 'Elegant'
    Gorgeous = 'Gorgeous'
    Simple = 'Simple'


class VariationTotal(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4
    integer_5 = 5
    integer_6 = 6
    integer_7 = 7
    integer_8 = 8


class Color(Enum):
    Aqua = 'Aqua'
    Beige = 'Beige'
    Black = 'Black'
    Blue = 'Blue'
    Brown = 'Brown'
    Colorful = 'Colorful'
    Gray = 'Gray'
    Green = 'Green'
    Orange = 'Orange'
    Pink = 'Pink'
    Purple = 'Purple'
    Red = 'Red'
    White = 'White'
    Yellow = 'Yellow'


class Variation(BaseModel):
    colors: Optional[List[Color]] = None
    image_url: Optional[str] = None
    variation: Optional[str] = None


class NHClothing(BaseModel):
    availability: Optional[List[AvailabilityItem]] = Field(
        None,
        description='Where the clothing may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.',
        examples=[[{'from': 'Able Sisters', 'note': ''}]],
    )
    buy: Optional[List[BuyItem]] = Field(
        None,
        description='An array of prices, for when the item may be purchased with Bells, Nook Miles, etc..',
        examples=[[{'currency': 'Bells', 'price': 490}]],
    )
    category: Optional[Category] = Field(
        None,
        description="The category of item as shown in the player's inventory.",
        examples=['Accessories'],
    )
    label_themes: Optional[List[LabelTheme]] = Field(
        None,
        description="The clothing's Label theme(s). This is used for completing the requested outfit theme for [Label](https://nookipedia.com/wiki/Label) when she visits the player's island.",
        examples=[['Party']],
    )
    name: Optional[str] = Field(
        None, description='The name of the clothing.', examples=['3D Glasses']
    )
    notes: Optional[str] = Field(
        None,
        description='Any additional miscellaneous information about the clothing, such as a name change from a past update.',
        examples=[''],
    )
    seasonality: Optional[str] = Field(
        None,
        description='The time of the year that the clothing is available.',
        examples=['All year'],
    )
    sell: Optional[int] = Field(
        None,
        description='The number of Bells the clothing can be sold to the store for.',
        examples=[122],
    )
    styles: Optional[List[Style]] = Field(
        None,
        description="The clothing's style(s). Styles are used for gifting villagers.",
        examples=[['Active']],
    )
    unlocked: Optional[bool] = Field(
        None,
        description="Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.",
        examples=[True],
    )
    url: Optional[str] = Field(
        None,
        description='Link to the respective Nookipedia article.',
        examples=['https://nookipedia.com/wiki/Item:3D_Glasses_(New_Horizons)'],
    )
    variation_total: Optional[VariationTotal] = Field(
        None,
        description='The total number of variations the clothing has, between 0 and 8.',
        examples=[2],
    )
    variations: Optional[List[Variation]] = Field(
        None,
        description='An array of objects, each object representing a variation of the clothing. Clothing that has no variations (only one version) will have a single variation object with the image URL and colors, but the `variation` field will be empty. Clothing with multiple variations will have the `variation` fields defined with the name of each variation.',
        examples=[
            [
                {
                    'colors': ['White', 'Colorful'],
                    'image_url': 'https://dodo.ac/np/images/1/15/3D_Glasses_%28White%29_NH_Icon.png',
                    'variation': 'White',
                },
                {
                    'colors': ['Colorful', 'Black'],
                    'image_url': 'https://dodo.ac/np/images/2/28/3D_Glasses_%28Black%29_NH_Icon.png',
                    'variation': 'Black',
                },
            ]
        ],
    )
    version_added: Optional[str] = Field(
        None,
        description='The version of *New Horizons* that the item was added. Items that were included at the game\'s launch have version "1.0.0".',
        examples=['1.0.0'],
    )
    vill_equip: Optional[bool] = Field(
        None, description='Whether villagers may equip this item.', examples=[True]
    )


class Type(Enum):
    Event = 'Event'
    Nook_Shopping = 'Nook Shopping'
    Recipes = 'Recipes'
    Birthday = 'Birthday'


class NHEvent(BaseModel):
    date: Optional[str] = Field(
        None,
        description='The date of the event in YYYY-MM-DD format.',
        examples=['2021-05-01'],
    )
    event: Optional[str] = Field(
        None,
        description='The description of the event.',
        examples=['May Day event begins'],
    )
    type: Optional[Type] = Field(
        None,
        description='The type of event. "Event" is a festivity the player can take part in. "Nook Shopping" refers to the [seasonal events](https://nookipedia.com/wiki/Nook_Shopping_seasonal_event) in which exclusive item(s) are available via []Nook Shopping](https://nookipedia.com/wiki/Nook_Shopping). "Recipes" refers to the start or end of certain recipes being available. "Birthday" refers to the birthday of a villager or special character.',
        examples=['Event'],
    )
    url: Optional[str] = Field(
        None,
        description='Link to the respective Nookipedia article for the event.',
        examples=['https://nookipedia.com/wiki/May_Day'],
    )


class North1(BaseModel):
    availability_array: Optional[List[AvailabilityArrayItem]] = Field(
        None,
        description='An array of objects, each object holding a months string and the time the critter is availabile during the specified month(s) in the northern hemisphere. Most critters will have just one object. A small number of critters have variable time availability in which case this array will have multiple objects.',
        examples=[
            [
                {'months': 'Mar – Jun', 'time': '4 PM – 9 AM'},
                {'months': 'Sep – Nov', 'time': 'All day'},
            ]
        ],
    )
    months: Optional[str] = Field(
        None,
        description='The months the fish is available for in the Northern hemisphere. If all year, value will be `"All year"`.',
        examples=['Mar – Jun; Sep – Nov'],
    )
    months_array: Optional[List[int]] = Field(
        None,
        description='An array of integers representing the months the fish is available in the Northern hemisphere.',
        examples=[[3, 4, 5, 6, 9, 10, 11]],
    )
    times_by_month: Optional[TimesByMonth] = Field(
        None,
        description='An object with twelve numerical keys, each representing a month (`"1"` for January, `"2"` for February, etc.). The value is the times the critter is available during that month. If the critter is unavailable in a month, the value will be `"NA"`.',
        examples=[
            {
                '1': 'NA',
                '10': 'All day',
                '11': 'All day',
                '12': 'NA',
                '2': 'NA',
                '3': '4 PM – 9 AM',
                '4': '4 PM – 9 AM',
                '5': '4 PM – 9 AM',
                '6': '4 PM – 9 AM',
                '7': 'NA',
                '8': 'NA',
                '9': 'All day',
            }
        ],
    )


class ShadowSize(Enum):
    X_Small = 'X-Small'
    Small = 'Small'
    Medium = 'Medium'
    Medium_w_Fin = 'Medium w/Fin'
    Large = 'Large'
    Large_w_Fin = 'Large w/Fin'
    X_Large = 'X-Large'
    XX_Large = 'XX-Large'
    Long = 'Long'


class TimesByMonth3(BaseModel):
    field_1: Optional[str] = Field(None, alias='1')
    field_10: Optional[str] = Field(None, alias='10')
    field_11: Optional[str] = Field(None, alias='11')
    field_12: Optional[str] = Field(None, alias='12')
    field_2_: Optional[str] = Field(None, alias="2'")
    field_3_: Optional[str] = Field(None, alias="3'")
    field_4: Optional[str] = Field(None, alias='4')
    field_5: Optional[str] = Field(None, alias='5')
    field_6: Optional[str] = Field(None, alias='6')
    field_7: Optional[str] = Field(None, alias='7')
    field_8: Optional[str] = Field(None, alias='8')
    field_9: Optional[str] = Field(None, alias='9')


class South1(BaseModel):
    availability_array: Optional[List[AvailabilityArrayItem]] = Field(
        None,
        description='An array of objects, each object holding a months string and the time the critter is availabile during the specified month(s) in the southern hemisphere. Most critters will have just one object. A small number of critters have variable time availability in which case this array will have multiple objects.',
        examples=[
            [
                {'months': 'Sep – Dec', 'time': '4 PM – 9 AM'},
                {'months': 'Mar – May', 'time': 'All day'},
            ]
        ],
    )
    months: Optional[str] = Field(
        None,
        description='The months the fish is available for in the Southern hemisphere. If all year, value will be `"All year"`.',
        examples=['Mar – May; Sep – Dec'],
    )
    months_array: Optional[List[int]] = Field(
        None,
        description='An array of integers representing the months the fish is available in the Southern hemisphere.',
        examples=[[3, 4, 5, 9, 10, 11, 12]],
    )
    times_by_month: Optional[TimesByMonth3] = Field(
        None,
        description='An object with twelve numerical keys, each representing a month (`"1"` for January, `"2"` for February, etc.). The value is the times the critter is available during that month. If the critter is unavailable in a month, the value will be `"NA"`.',
        examples=[
            {
                '1': 'NA',
                '10': 'All day',
                '11': 'All day',
                '12': 'NA',
                '2': 'NA',
                '3': '4 PM – 9 AM',
                '4': '4 PM – 9 AM',
                '5': '4 PM – 9 AM',
                '6': '4 PM – 9 AM',
                '7': 'NA',
                '8': 'NA',
                '9': 'All day',
            }
        ],
    )


class NHFish(BaseModel):
    catchphrases: Optional[List[str]] = Field(
        None,
        description='An array of possible catchphrases the player says after catching the fish. Most critters have just one, but some can have multiple.',
        examples=[
            ["I caught a cherry salmon! It's the perfect topper for a marlin sundae!"]
        ],
    )
    image_url: Optional[str] = Field(
        None,
        description="Image of the fish. dodo.ac is Nookipedia's CDN server.",
        examples=['https://dodo.ac/np/images/d/db/Cherry_Salmon_NH_Icon.png'],
    )
    location: Optional[str] = Field(
        None,
        description='Short descriptor of where the fish can be found.',
        examples=['River (clifftop)'],
    )
    name: Optional[str] = Field(
        None, description='Name of the fish.', examples=['Cherry Salmon']
    )
    north: Optional[North1] = Field(
        None, description='When you can catch the fish in the Northern hemisphere.'
    )
    number: Optional[int] = Field(
        None,
        description='In-game fish number, marking position in the Critterpedia.',
        examples=[27],
    )
    rarity: Optional[str] = Field(
        None,
        description='How rare the fish is. Note that this field is currently empty for most fish as we do not yet know how exactly fish rarities are calculated in the game code.',
        examples=['Uncommon'],
    )
    render_url: Optional[str] = Field(
        None,
        description="Render of the fish. dodo.ac is Nookipedia's CDN server.",
        examples=['https://dodo.ac/np/images/c/c0/Cherry_Salmon_NH.png'],
    )
    sell_cj: Optional[int] = Field(
        None,
        description='The number of Bells the fish can be sold to C.J. for. This value is always 1.5x that of `sell_nook`.',
        examples=[1500],
    )
    sell_nook: Optional[int] = Field(
        None,
        description="The number of Bells the fish can be sold to Nook's store for.",
        examples=[1000],
    )
    shadow_size: Optional[ShadowSize] = Field(
        None, description="The size of the fish's shadow.", examples=['Small']
    )
    south: Optional[South1] = Field(
        None, description='When you can catch the fish in the Southern hemisphere.'
    )
    tank_length: Optional[float] = Field(
        None,
        description='The length of the tank when the fish is placed as a furniture item.',
        examples=[1],
    )
    tank_width: Optional[float] = Field(
        None,
        description='The width of the tank when the fish is placed as a furniture item.',
        examples=[1],
    )
    total_catch: Optional[int] = Field(
        None,
        description='The total number of fish the player has to have caught before this fish will start spawning.',
        examples=[100],
    )
    url: Optional[str] = Field(
        None,
        description='Link to the respective Nookipedia article.',
        examples=['https://nookipedia.com/wiki/Cherry Salmon'],
    )


class NHFossilGroup(BaseModel):
    description: Optional[str] = Field(
        None,
        description='A description of the fossil group.',
        examples=[
            'Ahem. Yes. The Spinosaurus was a very large, carnivorous dinosaur, roughly the size of a T. Rex. Unlike its more famous cousin, however, Spinosaurus seems to have spent a great deal of time in water. Similar to modern crocodiles, this creature lived on a diet of fish AND land-dwelling animals. Personally, I am simply relieved that it did not seek FLYING prey.'
        ],
    )
    name: Optional[str] = Field(
        None, description='The name of the fossil group.', examples=['Spinosaurus']
    )
    room: Optional[int] = Field(
        None,
        description="The room where the fossil group can be found in the museum's fossil section.",
        examples=[2],
    )
    url: Optional[str] = Field(
        None,
        description='Link to the respective Nookipedia article.',
        examples=['https://nookipedia.com/wiki/Spinosaurus'],
    )


class Fossil(BaseModel):
    colors: Optional[List[Color]] = None
    fossil_group: Optional[str] = None
    hha_base: Optional[int] = None
    image_url: Optional[str] = None
    interactable: Optional[bool] = None
    length: Optional[int] = None
    name: Optional[str] = Field(None, examples=['Spino Skull'])
    sell: Optional[int] = None
    url: Optional[str] = None
    width: Optional[int] = None


class Matched(BaseModel):
    name: Optional[str] = Field(
        None,
        description='The name of the fossil or fossil group that matched the given query.',
        examples=['Spino Skull'],
    )
    type: Optional[str] = Field(
        None,
        description='If the query given was a fossil group, `group` would be returned. Otherwise, `individual` is returned.',
        examples=['individual'],
    )


class NHFossilGroupWithIndividualFossils(BaseModel):
    description: Optional[str] = Field(
        None,
        description='A description of the fossil group.',
        examples=[
            'Ahem. Yes. The Spinosaurus was a very large, carnivorous dinosaur, roughly the size of a T. Rex. Unlike its more famous cousin, however, Spinosaurus seems to have spent a great deal of time in water. Similar to modern crocodiles, this creature lived on a diet of fish AND land-dwelling animals. Personally, I am simply relieved that it did not seek FLYING prey.'
        ],
    )
    fossils: Optional[List[Fossil]] = Field(
        None,
        description='An array of objects, each object representing a fossil that belongs to the given group.',
        examples=[
            [
                {
                    'colors': ['Brown'],
                    'hha_base': 87,
                    'image_url': 'https://dodo.ac/np/images/7/7b/Spino_Skull_NH_Icon.png',
                    'interactable': True,
                    'length': 2,
                    'name': 'Spino Skull',
                    'sell': 4000,
                    'url': 'https://nookipedia.com/wiki/Spinosaurus',
                    'width': 2,
                },
                {
                    'colors': ['Brown'],
                    'hha_base': 87,
                    'image_url': 'https://dodo.ac/np/images/4/40/Spino_Tail_NH_Icon.png',
                    'interactable': True,
                    'length': 2,
                    'name': 'Spino Tail',
                    'sell': 2500,
                    'url': 'https://nookipedia.com/wiki/Spinosaurus',
                    'width': 2,
                },
                {
                    'colors': ['Brown'],
                    'hha_base': 87,
                    'image_url': 'https://dodo.ac/np/images/9/92/Spino_Torso_NH_Icon.png',
                    'interactable': True,
                    'length': 2,
                    'name': 'Spino Torso',
                    'sell': 3000,
                    'url': 'https://nookipedia.com/wiki/Spinosaurus',
                    'width': 2,
                },
            ]
        ],
    )
    matched: Optional[Matched] = None
    name: Optional[str] = Field(
        None, description='The name of the fossil group.', examples=['Spinosaurus']
    )
    room: Optional[int] = Field(
        None,
        description="The room where the fossil group can be found in the museum's fossil section.",
        examples=[2],
    )
    url: Optional[str] = Field(
        None,
        description='Link to the respective Nookipedia article.',
        examples=['https://nookipedia.com/wiki/Spinosaurus'],
    )


class Fossil1(BaseModel):
    colors: Optional[List[Color]] = None
    fossil_group: Optional[str] = None
    hha_base: Optional[int] = None
    image_url: Optional[str] = None
    interactable: Optional[bool] = None
    length: Optional[int] = None
    name: Optional[str] = Field(None, examples=['Spino Skull'])
    sell: Optional[int] = None
    url: Optional[str] = None
    width: Optional[int] = None


class NHFossilGroupWithIndividualFossilsNoMatched(BaseModel):
    description: Optional[str] = Field(
        None,
        description='A description of the fossil group.',
        examples=[
            'Ahem. Yes. The Spinosaurus was a very large, carnivorous dinosaur, roughly the size of a T. Rex. Unlike its more famous cousin, however, Spinosaurus seems to have spent a great deal of time in water. Similar to modern crocodiles, this creature lived on a diet of fish AND land-dwelling animals. Personally, I am simply relieved that it did not seek FLYING prey.'
        ],
    )
    fossils: Optional[List[Fossil1]] = Field(
        None,
        description='An array of objects, each object representing a fossil that belongs to the given group.',
        examples=[
            [
                {
                    'colors': ['Brown'],
                    'hha_base': 87,
                    'image_url': 'https://dodo.ac/np/images/7/7b/Spino_Skull_NH_Icon.png',
                    'interactable': True,
                    'length': 2,
                    'name': 'Spino Skull',
                    'sell': 4000,
                    'url': 'https://nookipedia.com/wiki/Spinosaurus',
                    'width': 2,
                },
                {
                    'colors': ['Brown'],
                    'hha_base': 87,
                    'image_url': 'https://dodo.ac/np/images/4/40/Spino_Tail_NH_Icon.png',
                    'interactable': True,
                    'length': 2,
                    'name': 'Spino Tail',
                    'sell': 2500,
                    'url': 'https://nookipedia.com/wiki/Spinosaurus',
                    'width': 2,
                },
                {
                    'colors': ['Brown'],
                    'hha_base': 87,
                    'image_url': 'https://dodo.ac/np/images/9/92/Spino_Torso_NH_Icon.png',
                    'interactable': True,
                    'length': 2,
                    'name': 'Spino Torso',
                    'sell': 3000,
                    'url': 'https://nookipedia.com/wiki/Spinosaurus',
                    'width': 2,
                },
            ]
        ],
    )
    name: Optional[str] = Field(
        None, description='The name of the fossil group.', examples=['Spinosaurus']
    )
    room: Optional[int] = Field(
        None,
        description="The room where the fossil group can be found in the museum's fossil section.",
        examples=[2],
    )
    url: Optional[str] = Field(
        None,
        description='Link to the respective Nookipedia article.',
        examples=['https://nookipedia.com/wiki/Spinosaurus'],
    )


class Category1(Enum):
    Housewares = 'Housewares'
    Miscellaneous = 'Miscellaneous'
    Wall_mounted = 'Wall-mounted'


class Function(Enum):
    Trash = 'Trash'
    Toilet = 'Toilet'
    Table = 'Table'
    Storage = 'Storage'
    Stereo = 'Stereo'
    Seating = 'Seating'
    Lighting = 'Lighting'
    Instrument = 'Instrument'
    Dresser = 'Dresser'
    Bed = 'Bed'
    Audio = 'Audio'


class LuckySeason(Enum):
    field_ = ''
    All_year = 'All year'
    Spring = 'Spring'
    Summer = 'Summer'
    Autumn = 'Autumn'
    Winter = 'Winter'


class PatternTotal(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3
    integer_4 = 4
    integer_5 = 5
    integer_6 = 6
    integer_7 = 7
    integer_8 = 8


class Variation1(BaseModel):
    colors: Optional[List[Color]] = None
    image_url: Optional[str] = None
    pattern: Optional[str] = None
    variation: Optional[str] = None


class NHFurniture(BaseModel):
    availability: Optional[List[AvailabilityItem]] = Field(
        None,
        description='Where the furniture may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.',
        examples=[[{'from': "Nook's Cranny (Upgraded)", 'note': ''}]],
    )
    buy: Optional[List[BuyItem]] = Field(
        None,
        description='An array of prices, for when the item may be purchased with Bells, Nook Miles, etc..',
        examples=[[{'currency': 'Bells', 'price': 31000}]],
    )
    category: Optional[Category1] = Field(
        None,
        description="The category of item as shown in the player's inventory.",
        examples=['Housewares'],
    )
    custom_body_part: Optional[str] = Field(
        None,
        description='If the item has variations, this is the name of the furniture part that changes. For example, for many bamboo items, the custom body part is "Bamboo" as the bamboo color is able to be customized.',
        examples=[''],
    )
    custom_kit_type: Optional[str] = Field(
        None,
        description='The item that needs to be consumed to customize this item. The vast majority are "Customization Kit", but a small selection of items will require a different item, such as items in the Spooky Series requireing pumpkins.',
        examples=[''],
    )
    custom_kits: Optional[int] = Field(
        None,
        description='The number of `custom_kit_type`s (e.g. Customization Kits) that are needed to customize this item. Value is 0 if the item is not customizable.',
        examples=[0],
    )
    custom_pattern_part: Optional[str] = Field(
        None,
        description='If the item\'s pattern can be customized, this is the name of the furniture part that can have a pattern applied to it. For example, for the Baby Chair, the custom pattern part is "Cushion" as the cushion on the chair may have a pattern applied.',
        examples=[''],
    )
    customizable: Optional[bool] = Field(
        None,
        description='Whether or not the item is customizable via a crafting table.',
        examples=[False],
    )
    door_decor: Optional[bool] = Field(
        None,
        description="Whether this item may be placed on the exterior door of the player's house.",
        examples=[False],
    )
    functions: Optional[List[Function]] = Field(
        None,
        description='A list of functionalities (if any) that the item has. For example, furniture that items can be placed on topof will have "Table" as a function..',
        examples=[['Dresser']],
    )
    grid_length: Optional[float] = Field(
        None,
        description='The number of lengthwise grid spaces this item takes up.',
        examples=[1],
    )
    grid_width: Optional[float] = Field(
        None,
        description='The number of widthwise grid spaces this item takes up.',
        examples=[2],
    )
    height: Optional[float] = Field(
        None,
        description='The height of the object. One in-game block is 10 units tall, while the player is 15.1324 units tall.',
        examples=[15.98677],
    )
    hha_base: Optional[int] = Field(
        None,
        description="The base value that the item provides to a player's Happy Home Academy score when placed in their home.",
        examples=[251],
    )
    hha_category: Optional[str] = Field(
        None,
        description='The HHA category the item is a part of, if any. If the item does not have an HHA category, this will be an empty string.',
        examples=['Dresser'],
    )
    item_series: Optional[str] = Field(
        None,
        description='The [furniture series](https://nookipedia.com/wiki/Series_(furniture)) the item is a part of, if any. A series is a collection of furniture and interior items, all with the same theme. If the item is not part of a series, this will be an empty string.',
        examples=['Antique'],
    )
    item_set: Optional[str] = Field(
        None,
        description='The [furniture set](https://nookipedia.com/wiki/Set) the item is a part of, if any. A set is a smaller collection of related furniture items. If the item is not part of a set, this will be an empty string.',
        examples=[''],
    )
    lucky: Optional[bool] = Field(
        None,
        description='Whether or not the item is lucky. Lucky items give a 777-point HHA bonus. Some items are only counted as lucky in certain seasons, as indicated by the `lucky_season` field.',
        examples=[False],
    )
    lucky_season: Optional[LuckySeason] = Field(
        None,
        description='The season in which the item is lucky (or "All year" if lucky throughout the entire year). Items that are not lucky will have this field as an empty string.',
        examples=[''],
    )
    name: Optional[str] = Field(
        None, description='The name of the furniture.', examples=['Antique Vanity']
    )
    notes: Optional[str] = Field(
        None,
        description='Any additional miscellaneous information about the item, such as a name change from a past update.',
        examples=[''],
    )
    pattern_total: Optional[PatternTotal] = Field(
        None,
        description='The number of default patterns available to customize the item with, between 0 and 8. For items with customizable patterns, the player may also customize with patterns of their own.',
        examples=[0],
    )
    sell: Optional[int] = Field(
        None,
        description="The number of Bells the item can be sold to Nook's store for.",
        examples=[7750],
    )
    tag: Optional[str] = Field(
        None,
        description='The tag of an item, if any, which denotes a specific use or relation to an event. Tags are determined by Nintendo. Examples include "Chair", "Musical Instrument", and "Mario". If the item does not have a tag, this will be an empty string.',
        examples=['Dresser'],
    )
    themes: Optional[List[str]] = Field(
        None,
        description='A list of [themes](https://nookipedia.com/wiki/Theme_(furniture)) (if any) that the item belongs to.',
        examples=[['Living Room', 'Expensive']],
    )
    unlocked: Optional[bool] = Field(
        None,
        description="Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.",
        examples=[True],
    )
    url: Optional[str] = Field(
        None,
        description='Link to the respective Nookipedia article.',
        examples=['https://nookipedia.com/wiki/Item:Antique_Vanity_(New_Horizons)'],
    )
    variation_total: Optional[VariationTotal] = Field(
        None, description='The number of variations, between 0 and 8.', examples=[3]
    )
    variations: Optional[List[Variation1]] = Field(
        None,
        description='An array of objects, each object representing a variation of the furniture. Furniture that has no variations (only one version) will have a single variation object with the image URL and colors, but the `variation` or `pattern` fields will be empty strings. Furniture with multiple variations will have the `variation` and/or `pattern` fields defined depending on whether the furniture varies by body variety, pattern, or both.',
        examples=[
            [
                {
                    'colors': ['Aqua', 'Brown'],
                    'image_url': 'https://dodo.ac/np/images/9/9e/Antique_Vanity_%28Brown%29_NH_Icon.png',
                    'pattern': '',
                    'variation': 'Brown',
                },
                {
                    'colors': ['Aqua', 'Beige'],
                    'image_url': 'https://dodo.ac/np/images/a/ab/Antique_Vanity_%28Natural%29_NH_Icon.png',
                    'pattern': '',
                    'variation': 'Natural',
                },
                {
                    'colors': ['Aqua', 'Black'],
                    'image_url': 'https://dodo.ac/np/images/5/55/Antique_Vanity_%28Black%29_NH_Icon.png',
                    'pattern': '',
                    'variation': 'Black',
                },
            ]
        ],
    )
    version_added: Optional[str] = Field(
        None,
        description='The version of *New Horizons* that the item was added. Items that were included at the game\'s launch have version "1.0.0".',
        examples=['1.0.0'],
    )


class NHIndividualFossil(BaseModel):
    colors: Optional[List[Color]] = Field(None, examples=[['Brown']])
    fossil_group: Optional[str] = Field(
        None,
        description='The name of the group that the fossil belongs to.',
        examples=['Spinosaurus'],
    )
    hha_base: Optional[int] = Field(
        None,
        description="The base value that the item provides to a player's Happy Home Academy score when placed in their home.",
        examples=[87],
    )
    image_url: Optional[str] = Field(
        None,
        description="Image of the fossil's icon. dodo.ac is Nookipedia's CDN server.",
        examples=['https://dodo.ac/np/images/7/7b/Spino_Skull_NH_Icon.png'],
    )
    interactable: Optional[bool] = Field(
        None,
        description='Whether or not the item can be interacted with.',
        examples=[False],
    )
    length: Optional[int] = Field(
        None, description='The length of the fossil.', examples=[2]
    )
    name: Optional[str] = Field(
        None, description='The name of the fossil.', examples=['Spino Skull']
    )
    sell: Optional[int] = Field(
        None,
        description="The number of bells the item can be sold to Nook's store for.",
        examples=[4000],
    )
    url: Optional[str] = Field(
        None,
        description='Link to the respective Nookipedia article.',
        examples=['https://nookipedia.com/wiki/Spinosaurus'],
    )
    width: Optional[int] = Field(
        None, description='The width of the fossil.', examples=[2]
    )


class Category2(Enum):
    Floors = 'Floors'
    Wallpaper = 'Wallpaper'
    Rugs = 'Rugs'


class Colors(Enum):
    Aqua = 'Aqua'
    Beige = 'Beige'
    Black = 'Black'
    Blue = 'Blue'
    Brown = 'Brown'
    Colorful = 'Colorful'
    Gray = 'Gray'
    Green = 'Green'
    Orange = 'Orange'
    Pink = 'Pink'
    Purple = 'Purple'
    Red = 'Red'
    White = 'White'
    Yellow = 'Yellow'


class NHInterior(BaseModel):
    availability: Optional[List[AvailabilityItem]] = Field(
        None,
        description='Where the clothing may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.',
        examples=[[{'from': "Nook's", 'note': ''}]],
    )
    buy: Optional[List[BuyItem]] = Field(
        None,
        description='An array of prices, for when the interior may be purchased with Bells, Nook Miles, etc..',
        examples=[[{'currency': 'Bells', 'price': 1560}]],
    )
    category: Optional[Category2] = Field(
        None,
        description="The category of item as shown in the player's inventory.",
        examples=['Wallpaper'],
    )
    colors: Optional[Colors] = Field(
        None, description='(WIP)', examples=[['White', 'Colorful']]
    )
    grid_length: Optional[float] = Field(
        None,
        description='The number of lengthwise grid spaces this item takes up.',
        examples=[1],
    )
    grid_width: Optional[float] = Field(
        None,
        description='The number of widthwise grid spaces this item takes up.',
        examples=[2],
    )
    hha_base: Optional[int] = Field(
        None,
        description="The base value that the item provides to a player's Happy Home Academy score when placed in their home.",
        examples=[0],
    )
    hha_category: Optional[str] = Field(
        None,
        description='The HHA category the item is a part of, if any. If the item does not have an HHA category, this will be an empty string.',
        examples=['Dresser'],
    )
    image_url: Optional[str] = Field(
        None,
        description="Image of the interior. dodo.ac is Nookipedia's CDN server.",
        examples=['https://dodo.ac/np/images/2/2d/Abstract_Wall_NH_Icon.png'],
    )
    item_series: Optional[str] = Field(
        None,
        description='The [furniture series](https://nookipedia.com/wiki/Series_(furniture)) the item is a part of, if any. A series is a collection of furniture and interior items, all with the same theme. If the item is not part of a series, this will be an empty string.',
        examples=[''],
    )
    item_set: Optional[str] = Field(
        None,
        description='The [furniture set](https://nookipedia.com/wiki/Set) the item is a part of, if any. A set is a smaller collection of related furniture items. If the item is not part of a set, this will be an empty string.',
        examples=[''],
    )
    name: Optional[str] = Field(
        None, description='The name of the interior.', examples=['Abstract Wall']
    )
    notes: Optional[str] = Field(
        None,
        description='Any additional miscellaneous information about the item, such as a name change from a past update.',
        examples=[''],
    )
    sell: Optional[int] = Field(
        None,
        description="The number of Bells the interior can be sold to Nook's store for.",
        examples=[200],
    )
    tag: Optional[str] = Field(
        None,
        description='The tag of an item, if any, which denotes a specific use or relation to an event. Tags are determined by Nintendo. Examples include "Chair", "Musical Instrument", and "Mario". If the item does not have a tag, this will be an empty string.',
        examples=['Dresser'],
    )
    themes: Optional[List[str]] = Field(
        None,
        description='A list of [themes](https://nookipedia.com/wiki/Theme_(furniture)) (if any) that the item belongs to.',
        examples=[['Shop', 'Facility']],
    )
    unlocked: Optional[bool] = Field(
        None,
        description="Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.",
        examples=[True],
    )
    url: Optional[str] = Field(
        None,
        description='Link to the respective Nookipedia article.',
        examples=['https://nookipedia.com/wiki/Item:Abstract_Wall_(New_Horizons)'],
    )
    version_added: Optional[str] = Field(
        None,
        description='The version of *New Horizons* that the item was added. Items that were included at the game\'s launch have version "1.0.0".',
        examples=['1.0.0'],
    )


class MaterialType(Enum):
    field_ = ''
    Bamboo = 'Bamboo'
    Mushroom = 'Mushroom'
    Trash = 'Trash'
    Wood = 'Wood'
    Ore = 'Ore'
    Snowflake = 'Snowflake'
    Tree = 'Tree'
    Ornament = 'Ornament'
    Fruit = 'Fruit'
    Underwater = 'Underwater'
    Other = 'Other'
    Leaf = 'Leaf'
    Shell = 'Shell'
    Flower = 'Flower'
    Star_Fragment = 'Star Fragment'
    Feather = 'Feather'
    Egg = 'Egg'
    Plant = 'Plant'


class PlantType(Enum):
    field_ = ''
    Pumpkin = 'Pumpkin'
    Flower = 'Flower'
    Bush = 'Bush'
    Tree = 'Tree'


class NHItem(BaseModel):
    availability: Optional[List[AvailabilityItem]] = Field(
        None,
        description='Where the clothing may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.',
        examples=[[{'from': "Nook's", 'note': ''}]],
    )
    buy: Optional[List[BuyItem]] = Field(
        None,
        description='An array of prices, for when the interior may be purchased with Bells, Nook Miles, etc..',
        examples=[[{'currency': 'Bells', 'price': 280}]],
    )
    edible: Optional[bool] = Field(
        None, description='Whether the item is edible or not.', examples=[False]
    )
    hha_base: Optional[int] = Field(
        None,
        description="The base value that the item provides to a player's Happy Home Academy score when placed in their home.",
        examples=[0],
    )
    image_url: Optional[str] = Field(
        None,
        description="Image of the interior. dodo.ac is Nookipedia's CDN server.",
        examples=['https://dodo.ac/np/images/9/9f/Acorn_NH_Icon.png'],
    )
    is_fence: Optional[bool] = Field(
        None, description='Whether or not the item is a fence or not.', examples=[False]
    )
    material_name_sort: Optional[int] = Field(None, description='(WIP)', examples=[0])
    material_seasonality: Optional[str] = Field(
        None, description='(WIP)', examples=['Autumn']
    )
    material_seasonality_sort: Optional[int] = Field(
        None, description='(WIP)', examples=[3]
    )
    material_sort: Optional[int] = Field(None, description='(WIP)', examples=[3])
    material_type: Optional[MaterialType] = Field(
        None, description='(WIP)', examples=['Tree']
    )
    name: Optional[str] = Field(
        None, description='The name of the item.', examples=['Acorn']
    )
    notes: Optional[str] = Field(
        None,
        description='Any additional miscellaneous information about the item, such as a name change from a past update.',
        examples=[''],
    )
    plant_type: Optional[PlantType] = Field(None, description='(WIP)', examples=[''])
    sell: Optional[int] = Field(
        None,
        description="The number of bells the item can be sold to Nook's store for.",
        examples=[200],
    )
    stack: Optional[int] = Field(
        None,
        description='How much the item can stack up to in a single inventory slot.',
        examples=[30],
    )
    unlocked: Optional[bool] = Field(
        None,
        description="Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.",
        examples=[True],
    )
    url: Optional[str] = Field(
        None,
        description='Link to the respective Nookipedia article.',
        examples=['https://nookipedia.com/wiki/Item:Acorn_(New_Horizons)'],
    )
    version_added: Optional[str] = Field(
        None,
        description='The version of *New Horizons* that the item was added. Items that were included at the game\'s launch have version "1.0.0".',
        examples=['1.0.0'],
    )


class Category3(Enum):
    Photos = 'Photos'
    Posters = 'Posters'


class Variation2(BaseModel):
    colors: Optional[List[Color]] = None
    image_url: Optional[str] = None
    variation: Optional[str] = None


class NHPhoto(BaseModel):
    availability: Optional[List[AvailabilityItem]] = Field(
        None,
        description='Where the photo may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.',
        examples=[[{'from': 'Friendship', 'note': ''}]],
    )
    buy: Optional[List[BuyItem]] = Field(
        None,
        description='An array of prices, for when the item may be purchased with Bells, Nook Miles, etc..',
        examples=[[]],
    )
    category: Optional[Category3] = Field(
        None,
        description="The category of item as shown in the player's inventory.",
        examples=['Accessories'],
    )
    custom_body_part: Optional[str] = Field(
        None,
        description='If the item has variations, this is the name of the furniture part that changes. For example, for many bamboo items, the custom body part is "Bamboo" as the bamboo color is able to be customized.',
        examples=['Frame'],
    )
    custom_kits: Optional[int] = Field(
        None,
        description='The number of `custom_kit_type`s (e.g. Customization Kits) that are needed to customize this item. Value is 0 if the item is not customizable.',
        examples=[1],
    )
    customizable: Optional[bool] = Field(
        None,
        description='Whether or not the item is customizable via a crafting table.',
        examples=[False],
    )
    grid_length: Optional[float] = Field(
        None,
        description='The number of lengthwise grid spaces this item takes up.',
        examples=[1],
    )
    grid_width: Optional[float] = Field(
        None,
        description='The number of widthwise grid spaces this item takes up.',
        examples=[2],
    )
    interactable: Optional[bool] = Field(
        None,
        description='Whether or not the item can be interacted with. This field is true for all photos and false for all posters.',
        examples=[True],
    )
    name: Optional[str] = Field(
        None, description='The name of the photo.', examples=["Admiral's Photo"]
    )
    sell: Optional[int] = Field(
        None,
        description='The number of Bells the photo can be sold to the store for.',
        examples=[10],
    )
    unlocked: Optional[bool] = Field(
        None,
        description="Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.",
        examples=[True],
    )
    url: Optional[str] = Field(
        None,
        description='Link to the respective Nookipedia article.',
        examples=["https://nookipedia.com/wiki/Item:Admiral's_Photo_(New_Horizons)"],
    )
    variations: Optional[List[Variation2]] = Field(
        None,
        description='An array of objects, each object representing a variation of the photo or poster. Items that has no variations (only one version) will have a single variation object with the image URL and colors, but the `variation` field will be empty. Items with multiple variations will have the `variation` fields defined with the name of each variation.',
        examples=[
            [
                {
                    'colors': ['Blue', 'Green'],
                    'image_url': 'https://dodo.ac/np/images/7/72/Admiral%27s_Photo_%28Natural_Wood%29_NH_Icon.png',
                    'variation': 'Natural Wood',
                },
                {
                    'colors': ['Blue', 'Green'],
                    'image_url': 'https://dodo.ac/np/images/e/e5/Admiral%27s_Photo_%28Dark_Wood%29_NH_Icon.png',
                    'variation': 'Dark Wood',
                },
                {
                    'colors': ['Blue', 'Green'],
                    'image_url': 'https://dodo.ac/np/images/9/9a/Admiral%27s_Photo_%28Pastel%29_NH_Icon.png',
                    'variation': 'Pastel',
                },
                {
                    'colors': ['Blue', 'Green'],
                    'image_url': 'https://dodo.ac/np/images/1/16/Admiral%27s_Photo_%28White%29_NH_Icon.png',
                    'variation': 'White',
                },
                {
                    'colors': ['Blue', 'Green'],
                    'image_url': 'https://dodo.ac/np/images/b/be/Admiral%27s_Photo_%28Pop%29_NH_Icon.png',
                    'variation': 'Pop',
                },
                {
                    'colors': ['Blue', 'Green'],
                    'image_url': 'https://dodo.ac/np/images/5/51/Admiral%27s_Photo_%28Colorful%29_NH_Icon.png',
                    'variation': 'Colorful',
                },
                {
                    'colors': ['Blue', 'Green'],
                    'image_url': 'https://dodo.ac/np/images/e/ed/Admiral%27s_Photo_%28Silver%29_NH_Icon.png',
                    'variation': 'Silver',
                },
                {
                    'colors': ['Blue', 'Green'],
                    'image_url': 'https://dodo.ac/np/images/c/cf/Admiral%27s_Photo_%28Gold%29_NH_Icon.png',
                    'variation': 'Gold',
                },
            ]
        ],
    )
    version_added: Optional[str] = Field(
        None,
        description='The version of *New Horizons* that the item was added. Items that were included at the game\'s launch have version "1.0.0".',
        examples=['1.0.0'],
    )


class Material(BaseModel):
    count: Optional[int] = None
    name: Optional[str] = None


class NHRecipe(BaseModel):
    availability: Optional[List[AvailabilityItem]] = Field(
        None,
        description='Where the recipe may be obtained from. `from` is a brief description of the source; `note`, when provided, provides additional details.',
        examples=[
            [
                {
                    'from': 'Tom Nook',
                    'note': "Obtained through Tom Nook's DIY Workshop at the beginning of the game.",
                },
                {'from': "Nook's Cranny", 'note': ''},
            ]
        ],
    )
    buy: Optional[List[BuyItem]] = Field(
        None,
        description='An array of prices, for when the recipe may be purchased with Bells, Nook Miles, etc. The majority of recipes cannot be bought (in which case this array will be empty).',
        examples=[[{'currency': 'Bells', 'price': 280}]],
    )
    image_url: Optional[str] = Field(
        None,
        description="Image of the item the recipe crafts. dodo.ac is Nookipedia's CDN server.",
        examples=['https://dodo.ac/np/images/a/ac/Flimsy_Axe_NH_DIY_Icon.png'],
    )
    materials: Optional[List[Material]] = Field(
        None,
        description='The list of materials required to craft the item.',
        examples=[[{'count': 5, 'name': 'Tree Branch'}, {'count': 1, 'name': 'Stone'}]],
    )
    name: Optional[str] = Field(
        None, description='The name of the recipe.', examples=['Flimsy Axe']
    )
    recipes_to_unlock: Optional[int] = Field(
        None,
        description='How many recipes the player has to have learned to unlock this one.',
        examples=[0],
    )
    sell: Optional[int] = Field(
        None,
        description="The number of Bells the sea creature can be sold to Nook's store for.",
        examples=[200],
    )
    serial_id: Optional[int] = Field(
        None, description='The unique in-game ID of the recipe.', examples=[100]
    )
    url: Optional[str] = Field(
        None,
        description='Link to the respective Nookipedia article.',
        examples=['https://nookipedia.com/wiki/Item:Flimsy_Axe_(New_Horizons)'],
    )


class TimesByMonth4(BaseModel):
    field_1: Optional[str] = Field(None, alias='1')
    field_10: Optional[str] = Field(None, alias='10')
    field_11: Optional[str] = Field(None, alias='11')
    field_12: Optional[str] = Field(None, alias='12')
    field_2: Optional[str] = Field(None, alias='2')
    field_3: Optional[str] = Field(None, alias='3')
    field_4: Optional[str] = Field(None, alias='4')
    field_5: Optional[str] = Field(None, alias='5')
    field_6: Optional[str] = Field(None, alias='6')
    field_7: Optional[str] = Field(None, alias='7')
    field_8: Optional[str] = Field(None, alias='8')
    field_9: Optional[str] = Field(None, alias='9')


class North2(BaseModel):
    availability_array: Optional[List[AvailabilityArrayItem]] = Field(
        None,
        description='An array of objects, each object holding a months string and the time the critter is availabile during the specified month(s) in the northern hemisphere. Most critters will have just one object. A small number of critters have variable time availability in which case this array will have multiple objects.',
        examples=[[{'months': 'All year', 'time': 'All day'}]],
    )
    months: Optional[str] = Field(
        None,
        description='The months the sea creature is available for in the Northern hemisphere. If all year, value will be `"All year"`.',
        examples=['Jul – Sep'],
    )
    months_array: Optional[List[int]] = Field(
        None,
        description='An array of integers representing the months the sea creature is available in the Northern hemisphere.',
        examples=[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]],
    )
    times_by_month: Optional[TimesByMonth4] = Field(
        None,
        description='An object with twelve numerical keys, each representing a month (`"1"` for January, `"2"` for February, etc.). The value is the times the critter is available during that month. If the critter is unavailable in a month, the value will be `"NA"`.',
        examples=[
            {
                '1': 'All day',
                '10': 'All day',
                '11': 'All day',
                '12': 'All day',
                '2': 'All day',
                '3': 'All day',
                '4': 'All day',
                '5': 'All day',
                '6': 'All day',
                '7': 'All day',
                '8': 'All day',
                '9': 'All day',
            }
        ],
    )


class ShadowMovement(Enum):
    Stationary = 'Stationary'
    Very_slow = 'Very slow'
    Slow = 'Slow'
    Medium = 'Medium'
    Fast = 'Fast'
    Very_fast = 'Very fast'


class ShadowSize1(Enum):
    X_Small = 'X-Small'
    Small = 'Small'
    Medium = 'Medium'
    Large = 'Large'
    X_Large = 'X-Large'


class South2(BaseModel):
    availability_array: Optional[List[AvailabilityArrayItem]] = Field(
        None,
        description='An array of objects, each object holding a months string and the time the critter is availabile during the specified month(s) in the southern hemisphere. Most critters will have just one object. A small number of critters have variable time availability in which case this array will have multiple objects.',
        examples=[[{'months': 'All year', 'time': 'All day'}]],
    )
    months: Optional[str] = Field(
        None,
        description='The months the sea creature is available for in the Southern hemisphere. If all year, value will be `"All year"`.',
        examples=['Jan – Mar'],
    )
    months_array: Optional[List[int]] = Field(
        None,
        description='An array of integers representing the months the sea creature is available in the Southern hemisphere.',
        examples=[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]],
    )
    times_by_month: Optional[TimesByMonth4] = Field(
        None,
        description='An object with twelve numerical keys, each representing a month (`"1"` for January, `"2"` for February, etc.). The value is the times the critter is available during that month. If the critter is unavailable in a month, the value will be `"NA"`.',
        examples=[
            {
                '1': 'All day',
                '10': 'All day',
                '11': 'All day',
                '12': 'All day',
                '2': 'All day',
                '3': 'All day',
                '4': 'All day',
                '5': 'All day',
                '6': 'All day',
                '7': 'All day',
                '8': 'All day',
                '9': 'All day',
            }
        ],
    )


class NHSeaCreature(BaseModel):
    catchphrases: Optional[List[str]] = Field(
        None,
        description='An array of possible catchphrases the player says after catching the sea creature. Most critters have just one, but some can have multiple.',
        examples=[['I got an octopus! It can give four hugs at once!']],
    )
    image_url: Optional[str] = Field(
        None,
        description="Image of the sea creature. dodo.ac is Nookipedia's CDN server.",
        examples=['https://dodo.ac/np/images/5/58/Octopus_NH_Icon.png'],
    )
    name: Optional[str] = Field(
        None, description='Name of the sea creature.', examples=['Octopus']
    )
    north: Optional[North2] = Field(
        None,
        description='When you can catch the sea creature in the Northern hemisphere.',
    )
    number: Optional[int] = Field(
        None,
        description='In-game sea creature number, marking position in the Critterpedia.',
        examples=[20],
    )
    rarity: Optional[str] = Field(
        None,
        description='How rare the sea creature is. Note that this field is currently empty for most sea creatures as we do not yet know how exactly sea creature rarities are calculated in the game code.',
        examples=['Uncommon'],
    )
    render_url: Optional[str] = Field(
        None,
        description="Render of the sea creature. dodo.ac is Nookipedia's CDN server.",
        examples=['https://dodo.ac/np/images/2/27/Octopus_NH.png'],
    )
    sell_nook: Optional[int] = Field(
        None,
        description="The number of Bells the sea creature can be sold to Nook's store for.",
        examples=[160],
    )
    shadow_movement: Optional[ShadowMovement] = Field(
        None,
        description='Short descriptor of where the sea creature can be found.',
        examples=['Slow'],
    )
    shadow_size: Optional[ShadowSize1] = Field(
        None,
        description='Short descriptor of where the sea creature can be found.',
        examples=['Medium'],
    )
    south: Optional[South2] = Field(
        None,
        description='When you can catch the sea creature in the Southern hemisphere.',
    )
    tank_length: Optional[confloat(multiple_of=0.1)] = Field(
        None,
        description='The length of the tank when the sea creature is placed as a furniture item.',
        examples=[1],
    )
    tank_width: Optional[confloat(multiple_of=0.1)] = Field(
        None,
        description='The width of the tank when the sea creature is placed as a furniture item.',
        examples=[1],
    )
    total_catch: Optional[int] = Field(
        None,
        description='The total number of sea creatures the player has to have caught before this sea creature will start spawning.',
        examples=[0],
    )
    url: Optional[str] = Field(
        None,
        description='Link to the respective Nookipedia article.',
        examples=['https://nookipedia.com/wiki/Octopus_(fish)'],
    )


class Variation3(BaseModel):
    image_url: Optional[str] = None
    variation: Optional[str] = None


class NHTool(BaseModel):
    availability: Optional[List[AvailabilityItem]] = Field(
        None,
        description='Where the tool may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.',
        examples=[
            [{'from': "Nook's Cranny", 'note': ''}, {'from': 'Crafting', 'note': ''}]
        ],
    )
    buy: Optional[List[BuyItem]] = Field(
        None,
        description='An array of prices, for when the item may be purchased with Bells, Nook Miles, etc..',
        examples=[[{'price': 2550}, {'currency': 'Bells'}]],
    )
    custom_body_part: Optional[str] = Field(
        None,
        description='If the item has variations, this is the name of the furniture part that changes. For example, for many bamboo items, the custom body part is "Bamboo" as the bamboo color is able to be customized.',
        examples=[''],
    )
    custom_kits: Optional[int] = Field(
        None,
        description='The number of `custom_kit_type`s (e.g. Customization Kits) that are needed to customize this item. Value is 0 if the item is not customizable.',
        examples=[0],
    )
    customizable: Optional[bool] = Field(
        None,
        description='Whether or not the item is customizable via a crafting table.',
        examples=[False],
    )
    hha_base: Optional[int] = Field(
        None,
        description="The base value that the item provides to a player's Happy Home Academy score when placed in their home.",
        examples=[0],
    )
    name: Optional[str] = Field(
        None, description='The name of the tool.', examples=['Axe']
    )
    notes: Optional[str] = Field(
        None,
        description='Any additional miscellaneous information about the item, such as a name change from a past update.',
        examples=[''],
    )
    sell: Optional[int] = Field(
        None,
        description='The number of bells the tool can be sold to the store for.',
        examples=[625],
    )
    unlocked: Optional[bool] = Field(
        None,
        description="Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.",
        examples=[True],
    )
    url: Optional[str] = Field(
        None,
        description='Link the the respective Nookipedia article.',
        examples=['https://nookipedia.com/wiki/Item:Axe_(New_Horizons)'],
    )
    uses: Optional[int] = Field(
        None,
        description='How many times the tool can be used before breaking.',
        examples=[100],
    )
    variations: Optional[List[Variation3]] = Field(
        None,
        description='An array of objects, each object representing a variation of the tool. Tools that has no variations (only one version) will have a single variation object with the image URL and colors, but the `variation` field will be empty. Tools with multiple variations will have the `variation` fields defined with the name of each variation.',
        examples=[
            [
                {
                    'image_url': 'https://dodo.ac/np/images/f/fa/Axe_NH_Icon.png',
                    'variation': '',
                }
            ]
        ],
    )
    version_added: Optional[str] = Field(
        None,
        description='The version of *New Horizons* that the item was added. Items that were included at the game\'s launch have version "1.0.0".',
        examples=['1.0.0'],
    )


class Appearance(Enum):
    DNM = 'DNM'
    AC = 'AC'
    E_PLUS = 'E_PLUS'
    WW = 'WW'
    CF = 'CF'
    NL = 'NL'
    WA = 'WA'
    NH = 'NH'
    FILM = 'FILM'
    HHD = 'HHD'
    PC = 'PC'


class Debut(Enum):
    DNM = 'DNM'
    AC = 'AC'
    E_PLUS = 'E_PLUS'
    WW = 'WW'
    CF = 'CF'
    NL = 'NL'
    WA = 'WA'
    NH = 'NH'
    FILM = 'FILM'
    HHD = 'HHD'
    PC = 'PC'


class Gender(Enum):
    Male = 'Male'
    Female = 'Female'


class Hobby(Enum):
    Education = 'Education'
    Fashion = 'Fashion'
    Fitness = 'Fitness'
    Music = 'Music'
    Nature = 'Nature'
    Play = 'Play'


class SubPersonality(Enum):
    A = 'A'
    B = 'B'


class NhDetails(BaseModel):
    catchphrase: Optional[str] = Field(
        None,
        description='The default phrase a villager will use when speaking to the player.',
        examples=['zzrrbbit'],
    )
    clothing: Optional[str] = Field(
        None,
        description='The default clothing that the villager wears.',
        examples=['Simple Parka'],
    )
    clothing_variation: Optional[str] = Field(
        None,
        description='The variation of the clothing (usually a color).',
        examples=['Light Blue'],
    )
    fav_colors: Optional[List[str]] = Field(
        None,
        description="The villager's favorite colors (giving the villager a gift with one of their favorite colors increases friendship points).",
        examples=[['Blue', 'Aqua']],
    )
    fav_styles: Optional[List[str]] = Field(
        None,
        description="The villager's favorite clothing styles.",
        examples=[['Simple', 'Active']],
    )
    hobby: Optional[Hobby] = Field(
        None,
        description="The villager's primary hobby, which determines most of the activities they will do around the island (e.g. education villagers will frequently read books and visit the museum). Learn more at https://nookipedia.com/wiki/Hobbies",
        examples=['Fitness'],
    )
    house_exterior_url: Optional[str] = Field(
        None,
        description="A rendered model of the villager's house exterior. Note that this is not an official Nintendo asset, but a render based of the in-game model.",
        examples=['https://dodo.ac/np/images/4/42/House_of_Ribbot_NH_Model.png'],
    )
    house_flooring: Optional[str] = Field(
        None,
        description="The flooring in the villager's house.",
        examples=['Future-Tech Flooring'],
    )
    house_interior_url: Optional[str] = Field(
        None,
        description="A screenshot of the villager's house interior.",
        examples=['https://dodo.ac/np/images/8/86/House_of_Ribbot_NH.png'],
    )
    house_music: Optional[str] = Field(
        None,
        description="The music in the villager's house.",
        examples=['K.K. Technopop'],
    )
    house_music_note: Optional[str] = Field(
        None,
        description='Any notes about the villager\'s music. If populated, this is usually "Does not contain a stereo initially", meaning that the villager\'s house will not play music unless provided with a stereo.',
        examples=[''],
    )
    house_wallpaper: Optional[str] = Field(
        None,
        description="The wallpaper in the villager's house.",
        examples=['Circuit-Board Wall'],
    )
    icon_url: Optional[str] = Field(
        None,
        description="The villager's icon of their head. See https://nookipedia.com/wiki/Category:New_Horizons_character_icons for full list.",
        examples=['https://dodo.ac/np/images/8/87/Ribbot_NH_Villager_Icon.png'],
    )
    image_url: Optional[str] = Field(
        None,
        description='Image of the villager from *New Horizons*.',
        examples=['https://dodo.ac/np/images/9/94/Ribbot_NH.png'],
    )
    photo_url: Optional[str] = Field(
        None,
        description="The villager's photo, received by the player after attaining a certain friendship level. See https://nookipedia.com/wiki/Category:New_Horizons_pictures for full list.",
        examples=['https://dodo.ac/np/images/0/03/RibbotPicACNH.png'],
    )
    quote: Optional[str] = Field(
        None,
        description="The villager's quote, as found on the back of their in-game photo.",
        examples=['Never rest, never rust.'],
    )
    sub_personality: Optional[SubPersonality] = Field(
        None,
        alias='sub-personality',
        description='Each personality in *New Horizons* has two sub-personalities, currently referred to as just A and B. The effect of a sub-personality is currently unknown.',
        examples=['B'],
    )


class Personality(Enum):
    Cranky = 'Cranky'
    Jock = 'Jock'
    Lazy = 'Lazy'
    Normal = 'Normal'
    Peppy = 'Peppy'
    Sisterly = 'Sisterly'
    Smug = 'Smug'
    Snooty = 'Snooty'


class Sign(Enum):
    Aries = 'Aries'
    Taurus = 'Taurus'
    Gemini = 'Gemini'
    Cancer = 'Cancer'
    Leo = 'Leo'
    Virgo = 'Virgo'
    Libra = 'Libra'
    Scorpio = 'Scorpio'
    Sagittarius = 'Sagittarius'
    Capricorn = 'Capricorn'
    Aquarius = 'Aquarius'
    Pisces = 'Pisces'


class Species(Enum):
    Alligator = 'Alligator'
    Anteater = 'Anteater'
    Bear = 'Bear'
    Bird = 'Bird'
    Bull = 'Bull'
    Cat = 'Cat'
    Cub = 'Cub'
    Chicken = 'Chicken'
    Cow = 'Cow'
    Deer = 'Deer'
    Dog = 'Dog'
    Duck = 'Duck'
    Eagle = 'Eagle'
    Elephant = 'Elephant'
    Frog = 'Frog'
    Goat = 'Goat'
    Gorilla = 'Gorilla'
    Hamster = 'Hamster'
    Hippo = 'Hippo'
    Horse = 'Horse'
    Koala = 'Koala'
    Kangaroo = 'Kangaroo'
    Lion = 'Lion'
    Monkey = 'Monkey'
    Mouse = 'Mouse'
    Octopus = 'Octopus'
    Ostrich = 'Ostrich'
    Penguin = 'Penguin'
    Pig = 'Pig'
    Rabbit = 'Rabbit'
    Rhino = 'Rhino'
    Sheep = 'Sheep'
    Squirrel = 'Squirrel'
    Tiger = 'Tiger'
    Wolf = 'Wolf'


class Villager(BaseModel):
    alt_name: Optional[str] = Field(
        None,
        description='A previous name for the villager. A very small number of villagers changed names between earlier games, such as Sally being known as Hazel in the original game.',
        examples=[''],
    )
    appearances: Optional[List[Appearance]] = Field(
        None,
        description='List of official media the villager appeared in. `DNM` is *Doubutsu no Mori* for the Nintendo 64 (Japan-exclusive); `AC` is *Animal Crossing* for GameCube; `E_PLUS` is *Doubutsu no Mori e+* for GameCube (expanded port of AC, Japan-exclusive); `WW` is *Wild World* for the DS; `CF` is *City Folk* for Wii; `NL` is *New Leaf* for 3DS; `WA` is *Welcome amiibo*, the *New Leaf* expansion; `NH` is *New Horizons* for Switch; `FILM` is the *Doubutsu no Mori* Japan-exclusive film; `HHD` is *Happy Home Designer* for the Wii; and `PC` is *Pocket Camp* for mobile.',
        examples=[['DNM', 'AC', 'E_PLUS', 'WW', 'CF', 'NL', 'WA', 'NH', 'HHD', 'PC']],
    )
    birthday_day: Optional[str] = Field(
        None,
        description="Birthday day of the villager. Note that villager birthdays were not introduced until *Wild World*. For villagers who didn't appear in *Wild World* or any later games, this field will be an empty string.",
        examples=['13'],
    )
    birthday_month: Optional[str] = Field(
        None,
        description="Birthday month of the villager. Note that villager birthdays were not introduced until *Wild World*. For villagers who didn't appear in *Wild World* or any later games, this field will be an empty string.",
        examples=['February'],
    )
    clothing: Optional[str] = Field(
        None,
        description="The villager's default clothing. This will be the clothing from the latest game (i.e. if the villager had varying phrases between *Wild World* and *New Horizons*, this will be the *New Horizons* clothing).",
        examples=['Simple Parka'],
    )
    debut: Optional[Debut] = Field(
        None,
        description='The first *Animal Crossing* game the villager appeared in. `DNM` is *Doubutsu no Mori* for the Nintendo 64 (Japan-exclusive); `AC` is *Animal Crossing* for GameCube; `E_PLUS` is *Doubutsu no Mori e+* for GameCube (expanded port of AC, Japan-exclusive); `WW` is *Wild World* for the DS; `CF` is *City Folk* for Wii; `NL` is *New Leaf* for 3DS; `WA` is *Welcome amiibo*, the *New Leaf* expansion; `NH` is *New Horizons* for Switch; `FILM` is the *Doubutsu no Mori* Japan-exclusive film; `HHD` is *Happy Home Designer* for the Wii; and `PC` is *Pocket Camp* for mobile.',
        examples=['DNM'],
    )
    gender: Optional[Gender] = Field(
        None,
        description='Gender of the villager. In *Animal Crossing*, only male and female are used.',
        examples=['Male'],
    )
    id: Optional[str] = Field(
        None,
        description="The game's internal identifier for the villager. Not all villagers have IDs; villagers who appeared in any game including or after *Wild World* have a consistent ID between games.",
        examples=['flg01'],
    )
    image_url: Optional[str] = Field(
        None,
        description="Image of the villager from the latest game the villager appeared in. dodo.ac is Nookipedia's CDN server.",
        examples=['https://dodo.ac/np/images/9/94/Ribbot_NH.png'],
    )
    islander: Optional[bool] = Field(
        None,
        description='Whether the villager was an island in *Animal Crossing* for GameCube. Only a small number of villagers (36) were islanders.',
        examples=[False],
    )
    name: Optional[str] = Field(
        None, description='Name of the villager.', examples=['Ribbot']
    )
    nh_details: Optional[NhDetails] = Field(
        None,
        description='An object that holds villager data specific to *New Horizons*. If the villager does not appear in *New Horizons*, this field will be set to null.',
    )
    personality: Optional[Personality] = Field(
        None,
        description="The villager's personality. Note that there are no official in-game personality names; these are names that are commonly used by the community. In the case of 'sisterly', other common names include 'big sis' and 'uchi'.",
        examples=['Jock'],
    )
    phrase: Optional[str] = Field(
        None,
        description="The villager's default phrase they use throughout conversation. This will be the phrase from the latest game (i.e. if the villager had varying phrases between *Wild World* and *New Horizons*, this will be the *New Horizons* quote).",
        examples=['zzrrbbit'],
    )
    prev_phrases: Optional[List[str]] = Field(
        None,
        description='Any phrases used in previous *Animal Crossing* installations. May be empty.',
        examples=[['toady']],
    )
    quote: Optional[str] = Field(
        None,
        description="The villager's quote as it appears on the back of their in-game portrait item. This will be the quote from the latest game (i.e. if the villager had varying quotes between *Wild World* and *New Horizons*, this will be the *New Horizons* quote). For villagers from older games that do not have a quote, this field will be an empty string.",
        examples=['Never rest, never rust.'],
    )
    sign: Optional[Sign] = Field(
        None,
        description="The villager's astrological star sign.",
        examples=['Aquarius'],
    )
    species: Optional[Species] = Field(
        None, description="The villager's species.", examples=['Frog']
    )
    text_color: Optional[str] = Field(
        None,
        description="The HTML color code of the text of the villager's name badge that appears above their dialogue box when spoken to in-game. Note that to date, only *New Horizons* villagers have this field populated.",
        examples=['5e5e5e'],
    )
    title_color: Optional[str] = Field(
        None,
        description="The HTML color code of the background of the villager's name badge that appears above their dialogue box when spoken to in-game. Note that to date, only *New Horizons* villagers have this field populated. This field may be useful for styling, such as the accent color for a Discord embed.",
        examples=['bfbfbf'],
    )
    url: Optional[str] = Field(
        None,
        description='Link to the respective Nookipedia article.',
        examples=['https://nookipedia.com/wiki/Ribbot'],
    )


class NhArtGetResponse(RootModel[List[NHArtwork]]):
    root: List[NHArtwork]


class NhBugsGetResponse(RootModel[List[NHBug]]):
    root: List[NHBug]


class Category4(Enum):
    Tops = 'Tops'
    Bottoms = 'Bottoms'
    Dress_up = 'Dress-up'
    Headwear = 'Headwear'
    Accessories = 'Accessories'
    Socks = 'Socks'
    Shoes = 'Shoes'
    Bags = 'Bags'
    Umbrellas = 'Umbrellas'


class ColorEnum(Enum):
    Aqua = 'Aqua'
    Beige = 'Beige'
    Black = 'Black'
    Blue = 'Blue'
    Brown = 'Brown'
    Colorful = 'Colorful'
    Gray = 'Gray'
    Green = 'Green'
    Orange = 'Orange'
    Pink = 'Pink'
    Purple = 'Purple'
    Red = 'Red'
    White = 'White'
    Yellow = 'Yellow'


class StyleEnum(Enum):
    Active = 'Active'
    Cool = 'Cool'
    Cute = 'Cute'
    Elegant = 'Elegant'
    Gorgeous = 'Gorgeous'
    Simple = 'Simple'


class Labeltheme(Enum):
    Comfy = 'Comfy'
    Everyday = 'Everyday'
    Fairy_tale = 'Fairy tale'
    Formal = 'Formal'
    Goth = 'Goth'
    Outdoorsy = 'Outdoorsy'
    Party = 'Party'
    Sporty = 'Sporty'
    Theatrical = 'Theatrical'
    Vacation = 'Vacation'
    Work = 'Work'


class NhClothingGetResponse(RootModel[List[NHClothing]]):
    root: List[NHClothing]


class Color6(RootModel[List[ColorEnum]]):
    root: List[ColorEnum]


class Style1(RootModel[List[StyleEnum]]):
    root: List[StyleEnum]


class NhEventsGetResponse(RootModel[List[NHEvent]]):
    root: List[NHEvent]


class NhFishGetResponse(RootModel[List[NHFish]]):
    root: List[NHFish]


class NhFossilsAllGetResponse(
    RootModel[List[NHFossilGroupWithIndividualFossilsNoMatched]]
):
    root: List[NHFossilGroupWithIndividualFossilsNoMatched]


class NhFossilsGroupsGetResponse(RootModel[List[NHFossilGroup]]):
    root: List[NHFossilGroup]


class NhFossilsIndividualsGetResponse(RootModel[List[NHIndividualFossil]]):
    root: List[NHIndividualFossil]


class Category6(Enum):
    Housewares = 'Housewares'
    Miscellaneous = 'Miscellaneous'
    Wall_mounted = 'Wall-mounted'


class NhFurnitureGetResponse(RootModel[List[NHFurniture]]):
    root: List[NHFurniture]


class Color7(RootModel[List[ColorEnum]]):
    root: List[ColorEnum]


class NhInteriorGetResponse(RootModel[List[NHInterior]]):
    root: List[NHInterior]


class Color8(RootModel[List[ColorEnum]]):
    root: List[ColorEnum]


class Color9(RootModel[List[ColorEnum]]):
    root: List[ColorEnum]


class NhItemsGetResponse(RootModel[List[NHItem]]):
    root: List[NHItem]


class NhPhotosGetResponse(RootModel[List[NHPhoto]]):
    root: List[NHPhoto]


class NhRecipesGetResponse(RootModel[List[NHRecipe]]):
    root: List[NHRecipe]


class NhSeaGetResponse(RootModel[List[NHSeaCreature]]):
    root: List[NHSeaCreature]


class NhToolsGetResponse(RootModel[List[NHTool]]):
    root: List[NHTool]


class Species1(Enum):
    alligator = 'alligator'
    anteater = 'anteater'
    bear = 'bear'
    bird = 'bird'
    bull = 'bull'
    cat = 'cat'
    cub = 'cub'
    chicken = 'chicken'
    cow = 'cow'
    deer = 'deer'
    dog = 'dog'
    duck = 'duck'
    eagle = 'eagle'
    elephant = 'elephant'
    frog = 'frog'
    goat = 'goat'
    gorilla = 'gorilla'
    hamster = 'hamster'
    hippo = 'hippo'
    horse = 'horse'
    koala = 'koala'
    kangaroo = 'kangaroo'
    lion = 'lion'
    monkey = 'monkey'
    mouse = 'mouse'
    octopus = 'octopus'
    ostrich = 'ostrich'
    penguin = 'penguin'
    pig = 'pig'
    rabbit = 'rabbit'
    rhino = 'rhino'
    sheep = 'sheep'
    squirrel = 'squirrel'
    tiger = 'tiger'
    wolf = 'wolf'


class Personality1(Enum):
    lazy = 'lazy'
    jock = 'jock'
    cranky = 'cranky'
    smug = 'smug'
    normal = 'normal'
    peppy = 'peppy'
    snooty = 'snooty'
    sisterly = 'sisterly'


class GameEnum(Enum):
    DNM = 'DNM'
    AC = 'AC'
    E_PLUS = 'E_PLUS'
    WW = 'WW'
    CF = 'CF'
    NL = 'NL'
    WA = 'WA'
    NH = 'NH'
    FILM = 'FILM'
    HHD = 'HHD'
    PC = 'PC'


class VillagersGetResponse(RootModel[List[Villager]]):
    root: List[Villager]


class Game(RootModel[List[GameEnum]]):
    root: List[GameEnum]
